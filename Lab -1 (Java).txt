import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.Random;


import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 * Viewer for IFS (Iterated Function System) image mapping.
 * 20W CST8132
 * @author Howard
 */
public class IfsViewer extends JPanel {

	private static final long serialVersionUID = 8462584230403421155L;
	private final boolean COLOUR;
	private final int SCALE_TYPE;
	private final int[][] ifs;
	private static double[][] output1={ {0.50,0.00,0.00,0.50,0.00,0.00,0.33},
			                        {0.50,0.00,0.00,0.50,0.00,0.50,0.33},
	                                {0.50,0.00,0.00,0.50,0.43,0.25,0.34}};
	private static double[][] output2= { {0.00,0.00,0.00,0.16,0.00,0.00,0.01},
			                          {0.85,0.04,-0.04,0.85,0.00,1.60,0.85},
			                          {0.20,-0.26,0.23,0.22,0.00,1.60,0.07},
			                          {-0.15,0.28,0.26,0.24,0.00,0.44,0.07}};
	

	private IfsViewer(int[][] matrix, boolean useColour, int scaleMapping) 
	{
		ifs=matrix;
		COLOUR = useColour;
		SCALE_TYPE = scaleMapping;
		int w = ifs.length;
		int h = ifs[0].length;
		setPreferredSize(new Dimension(w, h));
		setBackground(Color.white);
	}

	private void drawIfs(Graphics2D g) {
		//		int h = getHeight();
		//		int w = getWidth();
		int w = ifs.length;
		int h = ifs[0].length;
		BufferedImage image = new BufferedImage(w, h,
				BufferedImage.TYPE_INT_RGB);

		float max=0;
		for (int y = 0; y < h; y++) 
			for (int x = 0; x < w; x++) 
			{
				if(ifs[x][y]>max) {
					max=ifs[x][y];
				}
			}

		for (int y = 0; y < h; y++) {
			for (int x = 0; x < w; x++) {
				float i=ifs[x][y];
				float scale;
				scale=i/max;

				if(SCALE_TYPE < 0)
					scale=(float)Math.sqrt(scale);
				else if(SCALE_TYPE > 0)
					scale=scale*scale;
				//scale = (max / i) % 1;

				int c;
				if(COLOUR)
					c = Color.HSBtoRGB(scale, 1, i>0?1:0);
				else
					c = Color.HSBtoRGB(0, 0, i>0?scale:1);
				image.setRGB(x, y, c);
			}
		}
		g.drawImage(image, 0, 0, null);
	}

	/**
	 * Overrides paint in the JComponent
	 */
	@Override
	protected void paintComponent(Graphics gg) {
		super.paintComponent(gg);
		Graphics2D g = (Graphics2D) gg;
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		drawIfs(g);
	}
	


	/**
	 * View the IFS map on a JPanel. The mapping will be displayed in grey scale with a linear scale
	 * @param matrix The IFS map to be plotted
	 */
	public static void view(int[][] matrix)
	{
		view(matrix,false,0);
	}
	

	/**
	 * View the IFS map on a JPanel
	 * @param matrix The IFS map to be plotted
	 * @param useColour Should the map be in colour? if not, grey scale is used
	 * @param scaleMapping Mapping from pixel value to display value. 0 - linear scale, <0 square root scale, >0 squared scale 
	 */
	public static void view(int[][] matrix, boolean useColour, int scaleMapping)
	{
		String colourString = useColour?"Colour ":"Grey ";
		String scaleString = scaleMapping>0?"Squared scale":scaleMapping==0?"Linear scale":"Square root scale";
		SwingUtilities.invokeLater(() -> {
			JFrame f = new JFrame();
			f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			f.setTitle("IFS "+colourString+scaleString);
			f.setResizable(false);
			f.add(new IfsViewer(matrix,useColour,scaleMapping), BorderLayout.CENTER);
			f.pack();
			f.setLocationRelativeTo(null);
			f.setVisible(true);
		});
	}
public static void Ifs1(int scale,int hight,int width,double xOffset,double yOffset,double[][] ifs1) {
		
		int[][] abhi = new int[width][hight];
		double x=0;
		double y=0;
		for(int i= 0; i<width*hight*70; i++) {
			
		int n=0;
		for(int z=0;z<output1.length;z++) {
			double a = Math.random();
			if(a<output1[z][6]) {
				n=z;
				break;
			}
			else {
				a=a-output1[z][6];
			}
		}
				
		
		double u=output1[n][0]*x + ifs1[n][1]*y + ifs1[n][4];
		double v=output1[n][2]*x + ifs1[n][3]*y + ifs1[n][5];
		x=u;
		y=v;
		
		int xdisp= (int)(x * scale + xOffset);
		int ydisp= (int)(y * scale + yOffset);
		
		abhi[ydisp][xdisp]++;
		
		}
		IfsViewer.view(abhi);
	}

public static void Ifs2(int scale,int hight,int width,double xOffset,double yOffset,double[][] ifs2) {
		
		int[][] abhi = new int[width][hight];
		double x=0;
		double y=0;
		for(int i= 0; i<width*hight*70; i++) {
			
		int n=0;
		for(int e=0;e<output2.length;e++) {
			double a = Math.random();
			if(a<output2[e][6]) {
				n=e;
				break;
			}
			else {
				a=a-output2[e][6];
			}
		}
				
		
		double u=output2[n][0]*x + output2[n][1]*y + output2[n][4];
		double v=output2[n][2]*x + output2[n][3]*y + output2[n][5];
		x=u;
		y=v;
		
		int xdisp= (int)(x * scale + xOffset);
		int ydisp= (int)(y * scale + yOffset);
		
		abhi[ydisp][xdisp]++;
		
		}
		IfsViewer.view(abhi);
	}
	public static void main(String[] arg)
	{
	
		int size=401;
		int[][] test = new int[size][size];
		
		IfsViewer.Ifs1(-500,449,519,439,509, output1);
		IfsViewer.Ifs2(100, 503, 1019, 228, 10, output2);
			
	}
}